// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wipc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wipc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace wipc {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Screen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Screen_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Screen_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Resolution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resolution_reflection_ = NULL;
const ::google::protobuf::Descriptor* Frequency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Frequency_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageDiff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageDiff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Touch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Touch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Touch_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Key_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Key_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Button_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Button_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Button_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_wipc_2eproto() {
  protobuf_AddDesc_wipc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wipc.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, touch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, command_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_Type_descriptor_ = Message_descriptor_->enum_type(0);
  Screen_descriptor_ = file->message_type(1);
  static const int Screen_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, imagediff_),
  };
  Screen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Screen_descriptor_,
      Screen::default_instance_,
      Screen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Screen));
  Screen_Type_descriptor_ = Screen_descriptor_->enum_type(0);
  Resolution_descriptor_ = file->message_type(2);
  static const int Resolution_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, height_),
  };
  Resolution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resolution_descriptor_,
      Resolution::default_instance_,
      Resolution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resolution));
  Frequency_descriptor_ = file->message_type(3);
  static const int Frequency_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frequency, frequency_),
  };
  Frequency_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Frequency_descriptor_,
      Frequency::default_instance_,
      Frequency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frequency, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frequency, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Frequency));
  ImageDiff_descriptor_ = file->message_type(4);
  static const int ImageDiff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDiff, diff_),
  };
  ImageDiff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageDiff_descriptor_,
      ImageDiff::default_instance_,
      ImageDiff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDiff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDiff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageDiff));
  Touch_descriptor_ = file->message_type(5);
  static const int Touch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, flip_),
  };
  Touch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Touch_descriptor_,
      Touch::default_instance_,
      Touch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Touch));
  Touch_Type_descriptor_ = Touch_descriptor_->enum_type(0);
  Key_descriptor_ = file->message_type(6);
  static const int Key_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, defaultinputmethod_),
  };
  Key_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Key_descriptor_,
      Key::default_instance_,
      Key_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Key));
  Key_Type_descriptor_ = Key_descriptor_->enum_type(0);
  Button_descriptor_ = file->message_type(7);
  static const int Button_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, buttonid_),
  };
  Button_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Button_descriptor_,
      Button::default_instance_,
      Button_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Button));
  Button_Type_descriptor_ = Button_descriptor_->enum_type(0);
  Command_descriptor_ = file->message_type(8);
  static const int Command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, initkey_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  Command_Type_descriptor_ = Command_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wipc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Screen_descriptor_, &Screen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resolution_descriptor_, &Resolution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Frequency_descriptor_, &Frequency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageDiff_descriptor_, &ImageDiff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Touch_descriptor_, &Touch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Key_descriptor_, &Key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Button_descriptor_, &Button::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wipc_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Screen::default_instance_;
  delete Screen_reflection_;
  delete Resolution::default_instance_;
  delete Resolution_reflection_;
  delete Frequency::default_instance_;
  delete Frequency_reflection_;
  delete ImageDiff::default_instance_;
  delete ImageDiff_reflection_;
  delete Touch::default_instance_;
  delete Touch_reflection_;
  delete Key::default_instance_;
  delete Key_reflection_;
  delete Button::default_instance_;
  delete Button_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
}

void protobuf_AddDesc_wipc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nwipc.proto\022\004wipc\"\370\001\n\007Message\022 \n\004type\030\001"
    " \002(\0162\022.wipc.Message.Type\022\032\n\005touch\030\002 \003(\0132"
    "\013.wipc.Touch\022\034\n\006screen\030\003 \001(\0132\014.wipc.Scre"
    "en\022\026\n\003key\030\004 \001(\0132\t.wipc.Key\022\034\n\006button\030\005 \001"
    "(\0132\014.wipc.Button\022\036\n\007command\030\006 \001(\0132\r.wipc"
    ".Command\";\n\004Type\022\n\n\006SCREEN\020\001\022\t\n\005TOUCH\020\002\022"
    "\007\n\003KEY\020\003\022\n\n\006BUTTON\020\004\022\007\n\003CMD\020\005\"\313\001\n\006Screen"
    "\022\037\n\004type\030\001 \002(\0162\021.wipc.Screen.Type\022$\n\nres"
    "olution\030\002 \001(\0132\020.wipc.Resolution\022\"\n\tfrequ"
    "ency\030\003 \001(\0132\017.wipc.Frequency\022\"\n\timagediff"
    "\030\004 \001(\0132\017.wipc.ImageDiff\"2\n\004Type\022\016\n\nRESOL"
    "UTION\020\001\022\r\n\tFREQUENCY\020\002\022\013\n\007IMGDIFF\020\003\"+\n\nR"
    "esolution\022\r\n\005width\030\001 \002(\r\022\016\n\006height\030\002 \002(\r"
    "\"\036\n\tFrequency\022\021\n\tfrequency\030\001 \002(\r\"\031\n\tImag"
    "eDiff\022\014\n\004diff\030\001 \002(\010\"\210\001\n\005Touch\022\036\n\004type\030\001 "
    "\002(\0162\020.wipc.Touch.Type\022\r\n\005width\030\002 \002(\r\022\016\n\006"
    "height\030\003 \002(\r\022\016\n\006mirror\030\004 \002(\010\022\014\n\004flip\030\005 \002"
    "(\010\"\"\n\004Type\022\010\n\004MOVE\020\002\022\010\n\004DOWN\020\001\022\006\n\002UP\020\000\"`"
    "\n\003Key\022\034\n\004type\030\001 \002(\0162\016.wipc.Key.Type\022\032\n\022d"
    "efaultInputMethod\030\002 \001(\t\"\037\n\004Type\022\n\n\006ENABL"
    "E\020\000\022\013\n\007DISABLE\020\001\"d\n\006Button\022\037\n\004type\030\001 \002(\016"
    "2\021.wipc.Button.Type\022\020\n\010buttonid\030\002 \002(\r\"\'\n"
    "\004Type\022\006\n\002UP\020\000\022\010\n\004DOWN\020\001\022\r\n\tLONGPRESS\020\002\"h"
    "\n\007Command\022 \n\004type\030\001 \002(\0162\022.wipc.Command.T"
    "ype\022\017\n\007initkey\030\002 \001(\t\"*\n\004Type\022\010\n\004HALT\020\000\022\014"
    "\n\010INIT_KEY\020\001\022\n\n\006UPDATE\020\002B!\n\024com.webkey.n"
    "ativ.netB\tWIPCProto", 1059);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wipc.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Screen::default_instance_ = new Screen();
  Resolution::default_instance_ = new Resolution();
  Frequency::default_instance_ = new Frequency();
  ImageDiff::default_instance_ = new ImageDiff();
  Touch::default_instance_ = new Touch();
  Key::default_instance_ = new Key();
  Button::default_instance_ = new Button();
  Command::default_instance_ = new Command();
  Message::default_instance_->InitAsDefaultInstance();
  Screen::default_instance_->InitAsDefaultInstance();
  Resolution::default_instance_->InitAsDefaultInstance();
  Frequency::default_instance_->InitAsDefaultInstance();
  ImageDiff::default_instance_->InitAsDefaultInstance();
  Touch::default_instance_->InitAsDefaultInstance();
  Key::default_instance_->InitAsDefaultInstance();
  Button::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wipc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wipc_2eproto {
  StaticDescriptorInitializer_wipc_2eproto() {
    protobuf_AddDesc_wipc_2eproto();
  }
} static_descriptor_initializer_wipc_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Type_descriptor_;
}
bool Message_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_Type Message::SCREEN;
const Message_Type Message::TOUCH;
const Message_Type Message::KEY;
const Message_Type Message::BUTTON;
const Message_Type Message::CMD;
const Message_Type Message::Type_MIN;
const Message_Type Message::Type_MAX;
const int Message::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message::kTypeFieldNumber;
const int Message::kTouchFieldNumber;
const int Message::kScreenFieldNumber;
const int Message::kKeyFieldNumber;
const int Message::kButtonFieldNumber;
const int Message::kCommandFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wipc.Message)
}

void Message::InitAsDefaultInstance() {
  screen_ = const_cast< ::wipc::Screen*>(&::wipc::Screen::default_instance());
  key_ = const_cast< ::wipc::Key*>(&::wipc::Key::default_instance());
  button_ = const_cast< ::wipc::Button*>(&::wipc::Button::default_instance());
  command_ = const_cast< ::wipc::Command*>(&::wipc::Command::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wipc.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  screen_ = NULL;
  key_ = NULL;
  button_ = NULL;
  command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:wipc.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete screen_;
    delete key_;
    delete button_;
    delete command_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wipc_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & 61) {
    type_ = 1;
    if (has_screen()) {
      if (screen_ != NULL) screen_->::wipc::Screen::Clear();
    }
    if (has_key()) {
      if (key_ != NULL) key_->::wipc::Key::Clear();
    }
    if (has_button()) {
      if (button_ != NULL) button_->::wipc::Button::Clear();
    }
    if (has_command()) {
      if (command_ != NULL) command_->::wipc::Command::Clear();
    }
  }
  touch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wipc.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .wipc.Message.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::wipc::Message_Type_IsValid(value)) {
            set_type(static_cast< ::wipc::Message_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_touch;
        break;
      }

      // repeated .wipc.Touch touch = 2;
      case 2: {
        if (tag == 18) {
         parse_touch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_touch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_touch;
        if (input->ExpectTag(26)) goto parse_screen;
        break;
      }

      // optional .wipc.Screen screen = 3;
      case 3: {
        if (tag == 26) {
         parse_screen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // optional .wipc.Key key = 4;
      case 4: {
        if (tag == 34) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_button;
        break;
      }

      // optional .wipc.Button button = 5;
      case 5: {
        if (tag == 42) {
         parse_button:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_button()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_command;
        break;
      }

      // optional .wipc.Command command = 6;
      case 6: {
        if (tag == 50) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wipc.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wipc.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wipc.Message)
  // required .wipc.Message.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .wipc.Touch touch = 2;
  for (int i = 0; i < this->touch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->touch(i), output);
  }

  // optional .wipc.Screen screen = 3;
  if (has_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->screen(), output);
  }

  // optional .wipc.Key key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->key(), output);
  }

  // optional .wipc.Button button = 5;
  if (has_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->button(), output);
  }

  // optional .wipc.Command command = 6;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wipc.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wipc.Message)
  // required .wipc.Message.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .wipc.Touch touch = 2;
  for (int i = 0; i < this->touch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->touch(i), target);
  }

  // optional .wipc.Screen screen = 3;
  if (has_screen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->screen(), target);
  }

  // optional .wipc.Key key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->key(), target);
  }

  // optional .wipc.Button button = 5;
  if (has_button()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->button(), target);
  }

  // optional .wipc.Command command = 6;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wipc.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .wipc.Message.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .wipc.Screen screen = 3;
    if (has_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->screen());
    }

    // optional .wipc.Key key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // optional .wipc.Button button = 5;
    if (has_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->button());
    }

    // optional .wipc.Command command = 6;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

  }
  // repeated .wipc.Touch touch = 2;
  total_size += 1 * this->touch_size();
  for (int i = 0; i < this->touch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->touch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  touch_.MergeFrom(from.touch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_screen()) {
      mutable_screen()->::wipc::Screen::MergeFrom(from.screen());
    }
    if (from.has_key()) {
      mutable_key()->::wipc::Key::MergeFrom(from.key());
    }
    if (from.has_button()) {
      mutable_button()->::wipc::Button::MergeFrom(from.button());
    }
    if (from.has_command()) {
      mutable_command()->::wipc::Command::MergeFrom(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->touch())) return false;
  if (has_screen()) {
    if (!this->screen().IsInitialized()) return false;
  }
  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_button()) {
    if (!this->button().IsInitialized()) return false;
  }
  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    touch_.Swap(&other->touch_);
    std::swap(screen_, other->screen_);
    std::swap(key_, other->key_);
    std::swap(button_, other->button_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Screen_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Screen_Type_descriptor_;
}
bool Screen_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Screen_Type Screen::RESOLUTION;
const Screen_Type Screen::FREQUENCY;
const Screen_Type Screen::IMGDIFF;
const Screen_Type Screen::Type_MIN;
const Screen_Type Screen::Type_MAX;
const int Screen::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Screen::kTypeFieldNumber;
const int Screen::kResolutionFieldNumber;
const int Screen::kFrequencyFieldNumber;
const int Screen::kImagediffFieldNumber;
#endif  // !_MSC_VER

Screen::Screen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wipc.Screen)
}

void Screen::InitAsDefaultInstance() {
  resolution_ = const_cast< ::wipc::Resolution*>(&::wipc::Resolution::default_instance());
  frequency_ = const_cast< ::wipc::Frequency*>(&::wipc::Frequency::default_instance());
  imagediff_ = const_cast< ::wipc::ImageDiff*>(&::wipc::ImageDiff::default_instance());
}

Screen::Screen(const Screen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wipc.Screen)
}

void Screen::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  resolution_ = NULL;
  frequency_ = NULL;
  imagediff_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Screen::~Screen() {
  // @@protoc_insertion_point(destructor:wipc.Screen)
  SharedDtor();
}

void Screen::SharedDtor() {
  if (this != default_instance_) {
    delete resolution_;
    delete frequency_;
    delete imagediff_;
  }
}

void Screen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Screen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Screen_descriptor_;
}

const Screen& Screen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wipc_2eproto();
  return *default_instance_;
}

Screen* Screen::default_instance_ = NULL;

Screen* Screen::New() const {
  return new Screen;
}

void Screen::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 1;
    if (has_resolution()) {
      if (resolution_ != NULL) resolution_->::wipc::Resolution::Clear();
    }
    if (has_frequency()) {
      if (frequency_ != NULL) frequency_->::wipc::Frequency::Clear();
    }
    if (has_imagediff()) {
      if (imagediff_ != NULL) imagediff_->::wipc::ImageDiff::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Screen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wipc.Screen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .wipc.Screen.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::wipc::Screen_Type_IsValid(value)) {
            set_type(static_cast< ::wipc::Screen_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resolution;
        break;
      }

      // optional .wipc.Resolution resolution = 2;
      case 2: {
        if (tag == 18) {
         parse_resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolution()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_frequency;
        break;
      }

      // optional .wipc.Frequency frequency = 3;
      case 3: {
        if (tag == 26) {
         parse_frequency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frequency()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_imagediff;
        break;
      }

      // optional .wipc.ImageDiff imagediff = 4;
      case 4: {
        if (tag == 34) {
         parse_imagediff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagediff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wipc.Screen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wipc.Screen)
  return false;
#undef DO_
}

void Screen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wipc.Screen)
  // required .wipc.Screen.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .wipc.Resolution resolution = 2;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resolution(), output);
  }

  // optional .wipc.Frequency frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->frequency(), output);
  }

  // optional .wipc.ImageDiff imagediff = 4;
  if (has_imagediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->imagediff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wipc.Screen)
}

::google::protobuf::uint8* Screen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wipc.Screen)
  // required .wipc.Screen.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .wipc.Resolution resolution = 2;
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resolution(), target);
  }

  // optional .wipc.Frequency frequency = 3;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->frequency(), target);
  }

  // optional .wipc.ImageDiff imagediff = 4;
  if (has_imagediff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->imagediff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wipc.Screen)
  return target;
}

int Screen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .wipc.Screen.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .wipc.Resolution resolution = 2;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resolution());
    }

    // optional .wipc.Frequency frequency = 3;
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frequency());
    }

    // optional .wipc.ImageDiff imagediff = 4;
    if (has_imagediff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagediff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Screen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Screen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Screen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Screen::MergeFrom(const Screen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_resolution()) {
      mutable_resolution()->::wipc::Resolution::MergeFrom(from.resolution());
    }
    if (from.has_frequency()) {
      mutable_frequency()->::wipc::Frequency::MergeFrom(from.frequency());
    }
    if (from.has_imagediff()) {
      mutable_imagediff()->::wipc::ImageDiff::MergeFrom(from.imagediff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Screen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Screen::CopyFrom(const Screen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_resolution()) {
    if (!this->resolution().IsInitialized()) return false;
  }
  if (has_frequency()) {
    if (!this->frequency().IsInitialized()) return false;
  }
  if (has_imagediff()) {
    if (!this->imagediff().IsInitialized()) return false;
  }
  return true;
}

void Screen::Swap(Screen* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(resolution_, other->resolution_);
    std::swap(frequency_, other->frequency_);
    std::swap(imagediff_, other->imagediff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Screen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Screen_descriptor_;
  metadata.reflection = Screen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Resolution::kWidthFieldNumber;
const int Resolution::kHeightFieldNumber;
#endif  // !_MSC_VER

Resolution::Resolution()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wipc.Resolution)
}

void Resolution::InitAsDefaultInstance() {
}

Resolution::Resolution(const Resolution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wipc.Resolution)
}

void Resolution::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resolution::~Resolution() {
  // @@protoc_insertion_point(destructor:wipc.Resolution)
  SharedDtor();
}

void Resolution::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resolution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resolution_descriptor_;
}

const Resolution& Resolution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wipc_2eproto();
  return *default_instance_;
}

Resolution* Resolution::default_instance_ = NULL;

Resolution* Resolution::New() const {
  return new Resolution;
}

void Resolution::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Resolution*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(width_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wipc.Resolution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wipc.Resolution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wipc.Resolution)
  return false;
#undef DO_
}

void Resolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wipc.Resolution)
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wipc.Resolution)
}

::google::protobuf::uint8* Resolution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wipc.Resolution)
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wipc.Resolution)
  return target;
}

int Resolution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resolution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resolution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resolution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resolution::MergeFrom(const Resolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resolution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resolution::CopyFrom(const Resolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resolution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Resolution::Swap(Resolution* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resolution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resolution_descriptor_;
  metadata.reflection = Resolution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Frequency::kFrequencyFieldNumber;
#endif  // !_MSC_VER

Frequency::Frequency()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wipc.Frequency)
}

void Frequency::InitAsDefaultInstance() {
}

Frequency::Frequency(const Frequency& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wipc.Frequency)
}

void Frequency::SharedCtor() {
  _cached_size_ = 0;
  frequency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Frequency::~Frequency() {
  // @@protoc_insertion_point(destructor:wipc.Frequency)
  SharedDtor();
}

void Frequency::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Frequency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frequency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frequency_descriptor_;
}

const Frequency& Frequency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wipc_2eproto();
  return *default_instance_;
}

Frequency* Frequency::default_instance_ = NULL;

Frequency* Frequency::New() const {
  return new Frequency;
}

void Frequency::Clear() {
  frequency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Frequency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wipc.Frequency)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frequency = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wipc.Frequency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wipc.Frequency)
  return false;
#undef DO_
}

void Frequency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wipc.Frequency)
  // required uint32 frequency = 1;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frequency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wipc.Frequency)
}

::google::protobuf::uint8* Frequency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wipc.Frequency)
  // required uint32 frequency = 1;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frequency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wipc.Frequency)
  return target;
}

int Frequency::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 frequency = 1;
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frequency::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Frequency* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Frequency*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Frequency::MergeFrom(const Frequency& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Frequency::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frequency::CopyFrom(const Frequency& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frequency::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Frequency::Swap(Frequency* other) {
  if (other != this) {
    std::swap(frequency_, other->frequency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Frequency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Frequency_descriptor_;
  metadata.reflection = Frequency_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageDiff::kDiffFieldNumber;
#endif  // !_MSC_VER

ImageDiff::ImageDiff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wipc.ImageDiff)
}

void ImageDiff::InitAsDefaultInstance() {
}

ImageDiff::ImageDiff(const ImageDiff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wipc.ImageDiff)
}

void ImageDiff::SharedCtor() {
  _cached_size_ = 0;
  diff_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageDiff::~ImageDiff() {
  // @@protoc_insertion_point(destructor:wipc.ImageDiff)
  SharedDtor();
}

void ImageDiff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageDiff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDiff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageDiff_descriptor_;
}

const ImageDiff& ImageDiff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wipc_2eproto();
  return *default_instance_;
}

ImageDiff* ImageDiff::default_instance_ = NULL;

ImageDiff* ImageDiff::New() const {
  return new ImageDiff;
}

void ImageDiff::Clear() {
  diff_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageDiff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wipc.ImageDiff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool diff = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &diff_)));
          set_has_diff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wipc.ImageDiff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wipc.ImageDiff)
  return false;
#undef DO_
}

void ImageDiff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wipc.ImageDiff)
  // required bool diff = 1;
  if (has_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->diff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wipc.ImageDiff)
}

::google::protobuf::uint8* ImageDiff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wipc.ImageDiff)
  // required bool diff = 1;
  if (has_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->diff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wipc.ImageDiff)
  return target;
}

int ImageDiff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool diff = 1;
    if (has_diff()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDiff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageDiff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageDiff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageDiff::MergeFrom(const ImageDiff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diff()) {
      set_diff(from.diff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageDiff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDiff::CopyFrom(const ImageDiff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDiff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ImageDiff::Swap(ImageDiff* other) {
  if (other != this) {
    std::swap(diff_, other->diff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageDiff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageDiff_descriptor_;
  metadata.reflection = ImageDiff_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Touch_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Touch_Type_descriptor_;
}
bool Touch_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Touch_Type Touch::MOVE;
const Touch_Type Touch::DOWN;
const Touch_Type Touch::UP;
const Touch_Type Touch::Type_MIN;
const Touch_Type Touch::Type_MAX;
const int Touch::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Touch::kTypeFieldNumber;
const int Touch::kWidthFieldNumber;
const int Touch::kHeightFieldNumber;
const int Touch::kMirrorFieldNumber;
const int Touch::kFlipFieldNumber;
#endif  // !_MSC_VER

Touch::Touch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wipc.Touch)
}

void Touch::InitAsDefaultInstance() {
}

Touch::Touch(const Touch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wipc.Touch)
}

void Touch::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  width_ = 0u;
  height_ = 0u;
  mirror_ = false;
  flip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Touch::~Touch() {
  // @@protoc_insertion_point(destructor:wipc.Touch)
  SharedDtor();
}

void Touch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Touch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Touch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Touch_descriptor_;
}

const Touch& Touch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wipc_2eproto();
  return *default_instance_;
}

Touch* Touch::default_instance_ = NULL;

Touch* Touch::New() const {
  return new Touch;
}

void Touch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Touch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(width_, flip_);
    type_ = 2;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Touch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wipc.Touch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .wipc.Touch.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::wipc::Touch_Type_IsValid(value)) {
            set_type(static_cast< ::wipc::Touch_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // required uint32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // required uint32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mirror;
        break;
      }

      // required bool mirror = 4;
      case 4: {
        if (tag == 32) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flip;
        break;
      }

      // required bool flip = 5;
      case 5: {
        if (tag == 40) {
         parse_flip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_)));
          set_has_flip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wipc.Touch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wipc.Touch)
  return false;
#undef DO_
}

void Touch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wipc.Touch)
  // required .wipc.Touch.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // required uint32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // required bool mirror = 4;
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->mirror(), output);
  }

  // required bool flip = 5;
  if (has_flip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->flip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wipc.Touch)
}

::google::protobuf::uint8* Touch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wipc.Touch)
  // required .wipc.Touch.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // required uint32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // required bool mirror = 4;
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->mirror(), target);
  }

  // required bool flip = 5;
  if (has_flip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->flip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wipc.Touch)
  return target;
}

int Touch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .wipc.Touch.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required bool mirror = 4;
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // required bool flip = 5;
    if (has_flip()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Touch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Touch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Touch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Touch::MergeFrom(const Touch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_flip()) {
      set_flip(from.flip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Touch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Touch::CopyFrom(const Touch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Touch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Touch::Swap(Touch* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(mirror_, other->mirror_);
    std::swap(flip_, other->flip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Touch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Touch_descriptor_;
  metadata.reflection = Touch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Key_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Key_Type_descriptor_;
}
bool Key_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Key_Type Key::ENABLE;
const Key_Type Key::DISABLE;
const Key_Type Key::Type_MIN;
const Key_Type Key::Type_MAX;
const int Key::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Key::kTypeFieldNumber;
const int Key::kDefaultInputMethodFieldNumber;
#endif  // !_MSC_VER

Key::Key()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wipc.Key)
}

void Key::InitAsDefaultInstance() {
}

Key::Key(const Key& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wipc.Key)
}

void Key::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  defaultinputmethod_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:wipc.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  if (defaultinputmethod_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defaultinputmethod_;
  }
  if (this != default_instance_) {
  }
}

void Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Key_descriptor_;
}

const Key& Key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wipc_2eproto();
  return *default_instance_;
}

Key* Key::default_instance_ = NULL;

Key* Key::New() const {
  return new Key;
}

void Key::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_defaultinputmethod()) {
      if (defaultinputmethod_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        defaultinputmethod_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wipc.Key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .wipc.Key.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::wipc::Key_Type_IsValid(value)) {
            set_type(static_cast< ::wipc::Key_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_defaultInputMethod;
        break;
      }

      // optional string defaultInputMethod = 2;
      case 2: {
        if (tag == 18) {
         parse_defaultInputMethod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defaultinputmethod()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defaultinputmethod().data(), this->defaultinputmethod().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "defaultinputmethod");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wipc.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wipc.Key)
  return false;
#undef DO_
}

void Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wipc.Key)
  // required .wipc.Key.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string defaultInputMethod = 2;
  if (has_defaultinputmethod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defaultinputmethod().data(), this->defaultinputmethod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defaultinputmethod");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->defaultinputmethod(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wipc.Key)
}

::google::protobuf::uint8* Key::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wipc.Key)
  // required .wipc.Key.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string defaultInputMethod = 2;
  if (has_defaultinputmethod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defaultinputmethod().data(), this->defaultinputmethod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defaultinputmethod");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->defaultinputmethod(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wipc.Key)
  return target;
}

int Key::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .wipc.Key.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string defaultInputMethod = 2;
    if (has_defaultinputmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defaultinputmethod());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Key::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Key* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Key*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Key::MergeFrom(const Key& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_defaultinputmethod()) {
      set_defaultinputmethod(from.defaultinputmethod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Key::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key::CopyFrom(const Key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Key::Swap(Key* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(defaultinputmethod_, other->defaultinputmethod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Key_descriptor_;
  metadata.reflection = Key_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Button_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Button_Type_descriptor_;
}
bool Button_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Button_Type Button::UP;
const Button_Type Button::DOWN;
const Button_Type Button::LONGPRESS;
const Button_Type Button::Type_MIN;
const Button_Type Button::Type_MAX;
const int Button::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Button::kTypeFieldNumber;
const int Button::kButtonidFieldNumber;
#endif  // !_MSC_VER

Button::Button()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wipc.Button)
}

void Button::InitAsDefaultInstance() {
}

Button::Button(const Button& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wipc.Button)
}

void Button::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  buttonid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Button::~Button() {
  // @@protoc_insertion_point(destructor:wipc.Button)
  SharedDtor();
}

void Button::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Button::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Button::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Button_descriptor_;
}

const Button& Button::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wipc_2eproto();
  return *default_instance_;
}

Button* Button::default_instance_ = NULL;

Button* Button::New() const {
  return new Button;
}

void Button::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Button*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, buttonid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Button::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wipc.Button)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .wipc.Button.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::wipc::Button_Type_IsValid(value)) {
            set_type(static_cast< ::wipc::Button_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buttonid;
        break;
      }

      // required uint32 buttonid = 2;
      case 2: {
        if (tag == 16) {
         parse_buttonid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buttonid_)));
          set_has_buttonid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wipc.Button)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wipc.Button)
  return false;
#undef DO_
}

void Button::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wipc.Button)
  // required .wipc.Button.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 buttonid = 2;
  if (has_buttonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buttonid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wipc.Button)
}

::google::protobuf::uint8* Button::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wipc.Button)
  // required .wipc.Button.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 buttonid = 2;
  if (has_buttonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buttonid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wipc.Button)
  return target;
}

int Button::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .wipc.Button.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 buttonid = 2;
    if (has_buttonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buttonid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Button::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Button* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Button*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Button::MergeFrom(const Button& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_buttonid()) {
      set_buttonid(from.buttonid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Button::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Button::CopyFrom(const Button& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Button::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Button::Swap(Button* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(buttonid_, other->buttonid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Button::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Button_descriptor_;
  metadata.reflection = Button_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Command_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_Type_descriptor_;
}
bool Command_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_Type Command::HALT;
const Command_Type Command::INIT_KEY;
const Command_Type Command::UPDATE;
const Command_Type Command::Type_MIN;
const Command_Type Command::Type_MAX;
const int Command::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Command::kTypeFieldNumber;
const int Command::kInitkeyFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wipc.Command)
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wipc.Command)
}

void Command::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  initkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:wipc.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (initkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initkey_;
  }
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wipc_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_initkey()) {
      if (initkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        initkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wipc.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .wipc.Command.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::wipc::Command_Type_IsValid(value)) {
            set_type(static_cast< ::wipc::Command_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_initkey;
        break;
      }

      // optional string initkey = 2;
      case 2: {
        if (tag == 18) {
         parse_initkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initkey().data(), this->initkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "initkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wipc.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wipc.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wipc.Command)
  // required .wipc.Command.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string initkey = 2;
  if (has_initkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initkey().data(), this->initkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->initkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wipc.Command)
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wipc.Command)
  // required .wipc.Command.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string initkey = 2;
  if (has_initkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initkey().data(), this->initkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->initkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wipc.Command)
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .wipc.Command.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string initkey = 2;
    if (has_initkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_initkey()) {
      set_initkey(from.initkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(initkey_, other->initkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wipc

// @@protoc_insertion_point(global_scope)
